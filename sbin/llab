#!/usr/bin/env python
"""Command line tool for managing and dispatching commands for the Git client.

"""
import argparse
import subprocess
import sys

parser = argparse.ArgumentParser(description='llab command line tool')
subparsers = parser.add_subparsers(dest='command')

# Always require a user id
parser.add_argument('--user', help='The user id', metavar='USER_ID', type=int)
parser.add_argument('--ssh', help='True if over SSH', action='store_true')

# Construct the pre-receive parser
pre_receive_parser = subparsers.add_parser(
    'git-upload-pack', help='Clone or Upload Hook Command Line Tools')


# Construct the pre-receive parser
pre_receive_parser = subparsers.add_parser(
    'git-receive-pack', help='Pre-receive Hook Command Line Tools')

# Construct the post-receive parser
post_receive_parser = subparsers.add_parser(
    'post-receive', help='Post-receive Hook Command Line Tools')

# Construct the post-receive parser
update_parser = subparsers.add_parser(
    'update', help='Update Hook Command Line Tools')

# A hack around passing arguments via SSH
argv = sys.argv
if '--ssh' in sys.argv:
    argv = ' '.join(sys.argv).replace("'", '').split(' ')[1:]

args, remaining_args = parser.parse_known_args(argv)
handoff_args = ['--user', str(args.user)] + remaining_args

if args.command == 'git-receive-pack':
    subprocess.call(['llab-receive-pack'] + handoff_args)

elif args.command == 'git-upload-pack':
    subprocess.call(['llab-upload-pack'] + handoff_args)
